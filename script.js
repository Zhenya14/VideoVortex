// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–Ω—ñ–∂–∏–Ω–æ–∫
    // function createSnowflake() {
    //     const snowflake = document.createElement('div');
    //     snowflake.classList.add('snowflake');
    //     snowflake.textContent = '?';
    //     snowflake.style.left = Math.random() * 100 + 'vw';
    //     snowflake.style.animationDuration = Math.random() * 3 + 2 + 's';
    //     snowflake.style.fontSize = Math.random() * 10 + 10 + 'px';
    //     snowflake.style.setProperty('--x', Math.random());
    //     document.body.appendChild(snowflake);

    //     setTimeout(() => {
    //         snowflake.remove();
    //     }, 5000);
    // }

    // // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–Ω—ñ–∂–∏–Ω–æ–∫ –∫–æ–∂–Ω—ñ 100 –º—Å
    // setInterval(createSnowflake, 100);
function toggleSidebar() {
    var sidebar = document.querySelector('.menu');
    var content = document.querySelector('.content');

    if (sidebar.style.width === "240px") {
        sidebar.style.width = "0";
        content.style.marginLeft = "0";
    } else {
        sidebar.style.width = "240px";
        content.style.marginLeft = "240px";
    }
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é
function closeSidebar() {
    var sidebar = document.querySelector('.menu');
    var content = document.querySelector('.content');

    sidebar.style.width = "0";
    content.style.marginLeft = "0";
}

let currentEditKey = null;
let maxTimeInMinutes = null;
let timeLeftInSeconds = null;
let sleepStart = null;
let sleepEnd = null;
let userAge = null;
 // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∏
    let currentUserEmail = null;
    let showNSFW = false; // Track whether the user wants to view NSFW content
const firebaseConfig = {
  apiKey: "AIzaSyBkPYP3bnDy61NFjRSboRZrfTVNTdIMWbY",
  authDomain: "videovortex-235cd.firebaseapp.com",
  databaseURL: "https://videovortex-235cd-default-rtdb.europe-west1.firebasedatabase.app",
  projectId: "videovortex-235cd",
  storageBucket: "videovortex-235cd.appspot.com",
  messagingSenderId: "681594250269",
  appId: "1:681594250269:web:1176b21fcc8fe2a7d052f4"
};

firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const database = firebase.database();
const storage = firebase.storage();
const messaging = firebase.messaging();

// ==========================
// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è Service Worker
// ==========================
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/firebase-messaging-sw.js')
    .then(registration => {
      console.log('‚úÖ SW –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ', registration);
      messaging.useServiceWorker(registration);
    })
    .catch(err => console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ SW:', err));
}

// ==========================
// –ü—É—à—ñ
// ==========================
async function enablePushNotifications(userId) {
  try {
    const permission = await Notification.requestPermission();
    if (permission !== "granted") {
      console.log("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –¥–æ–∑–≤–æ–ª–∏–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è");
      return;
    }

    const token = await messaging.getToken({
      vapidKey: "BFkinse0q7x94PIX608Y9QsATJ0Ht2S-k6TeOpSFdB0sXIRLyxf1wKHTboOUHJY5tQB8wGMyMcoEQEV5fDu4sS4"
    });

    console.log("‚úÖ Push —Ç–æ–∫–µ–Ω:", token);

    database.ref("users/" + userId + "/pushToken").set(token)
      .then(() => console.log("‚úÖ Token saved"))
      .catch(err => console.error("‚ùå Error saving token:", err));

  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:", err);
  }
}

// ==========================
// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É—à—ñ–≤ —É –±—Ä–∞—É–∑–µ—Ä—ñ
// ==========================
messaging.onMessage(payload => {
  console.log("üì¨ –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", payload);
  const { title, body, icon } = payload.notification || {};
  if (title) new Notification(title, { body, icon });
});


        document.getElementById("auth-link").onclick = function() {
            const authForm = document.getElementById("auth-form");
            authForm.style.display = authForm.style.display === "none" ? "block" : "none";
            document.getElementById("register-form").style.display = "none";
        };
        
        document.getElementById("register-link").onclick = function() {
            const registerForm = document.getElementById("register-form");
            registerForm.style.display = registerForm.style.display === "none" ? "block" : "none";
            document.getElementById("auth-form").style.display = "none";
        };
        document.getElementById("account-link").onclick = function() {
           if (auth.currentUser) {
            const accountForm = document.getElementById("account-form");
            accountForm.style.display = accountForm.style.display === "none" ? "block" : "none";
            document.getElementById("upload-form").style.display = "none";
          } else {
                alert("–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫–∞—É–Ω—Ç.");
            }
        };
        document.getElementById("upload-link").onclick = function() {
            if (auth.currentUser) {
                const uploadVideoForm = document.getElementById("upload-form");
                uploadVideoForm.style.display = uploadVideoForm.style.display === "none" ? "block" : "none";
                document.getElementById("account-form").style.display = "none";
                document.getElementById("upload-photo-form").style.display = "none";
            } else {
                alert("–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ.");
            }
        };
	    document.getElementById("smart-upload-link").onclick = function() {
            if (auth.currentUser) {
                const uploadVideoForm = document.getElementById("upload-form");
                uploadVideoForm.style.display = uploadVideoForm.style.display === "none" ? "block" : "none";
                document.getElementById("account-form").style.display = "none";
                document.getElementById("upload-photo-form").style.display = "none";
            } else {
                alert("–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ.");
            }
        };
        document.getElementById("post").onclick = function() {
           document.getElementById("video-container").style.display = 'none';
        document.getElementById("photo-container").style.display = 'flex';
        }
            document.getElementById("video").onclick = function() {
           document.getElementById("video-container").style.display = 'flex';
        document.getElementById("photo-container").style.display = 'none';
        }
        document.getElementById("smart-post").onclick = function() {
           document.getElementById("video-container").style.display = 'none';
        document.getElementById("photo-container").style.display = 'flex';
        }
            document.getElementById("smart-video").onclick = function() {
           document.getElementById("video-container").style.display = 'flex';
        document.getElementById("photo-container").style.display = 'none';
        }
        document.getElementById("upload-link-photo").onclick = function() {
            if (auth.currentUser) {
                const uploadPhotoForm = document.getElementById("upload-photo-form");
                uploadPhotoForm.style.display = uploadPhotoForm.style.display === "none" ? "block" : "none";
                document.getElementById("upload-form").style.display = "none";
                document.getElementById("account-form").style.display = "none";
            } else {
                alert("–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ.");
            }
        };
 document.getElementById("smart-upload-link-photo").onclick = function() {
            if (auth.currentUser) {
                const uploadPhotoForm = document.getElementById("upload-photo-form");
                uploadPhotoForm.style.display = uploadPhotoForm.style.display === "none" ? "block" : "none";
                document.getElementById("upload-form").style.display = "none";
                document.getElementById("account-form").style.display = "none";
            } else {
                alert("–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ.");
            }
        };
	    function blockScreenForVerification() {
    document.body.innerHTML = `
                <h1>–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É</h1>
                <p>–ú–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –≤–∞–º –ª–∏—Å—Ç –Ω–∞ –ø–æ—à—Ç—É. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç! –Ø–∫—â–æ –Ω–µ –±–∞—á–∏—Ç–µ, —Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º".</p>
                <button style="
                    margin-top: 20px;
                    padding: 10px 20px;
                    font-size: 16px;
                    border: none;
                    border-radius: 5px;
                    background: #ffffff;
                    color: #ff7e5f;
                    cursor: pointer;
                " onclick="resendVerification()">–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–∏—Å—Ç —â–µ —Ä–∞–∑</button>
<button id="delete-account" onclick="deleteAccount()"><i class="material-icons">person_remove</i><span style="margin-left: 5px;">–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç</span></button>
<a href="#" id="logout-link-verification" onclick="logout()">
                <i class="material-icons">logout</i><span class="icon-text">–í–∏–π—Ç–∏</span>
</a>
                <p style="margin-top: 20px;">–ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ –∑–∞—á–µ–∫–∞–π—Ç–µ –∞–±–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É.</p>
            </div>
        </div>
    `;
}

// –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–∏—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ
function resendVerification() {
    const user = auth.currentUser;
    if (user) {
        user.sendEmailVerification()
            .then(() => {
                alert("–õ–∏—Å—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ!");
            })
            .catch((error) => {
                alert("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–∏—Å—Ç–∞: " + error.message);
            });
    }
}
function deleteAccount() {
    const user = firebase.auth().currentUser;

    if (!user) {
        alert("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç.");
        return;
    }

    if (!confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç? –í–∞—à—ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ! –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏.")) {
        return;
    }

    const uid = user.uid;
    const videosRef = firebase.database().ref("videos");
    const commentsRef = firebase.database().ref("comments");
    const usersRef = firebase.database().ref("users/" + uid);

    // ?? 1. –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –≤—ñ–¥–µ–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    videosRef.once("value")
        .then(snapshot => {
            const deleteVideoPromises = [];

            snapshot.forEach(childSnapshot => {
                const videoData = childSnapshot.val();
                const videoKey = childSnapshot.key;

                if (videoData.email === user.email) {
                    const dbDelete = firebase.database().ref(`videos/${videoKey}`).remove();
                    const storageDelete = firebase.storage().ref(`videos/${videoKey}`).delete()
                        .catch(error => console.warn(`?? –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª –∑ Storage (${videoKey}):`, error));

                    deleteVideoPromises.push(dbDelete, storageDelete);
                }
            });

            return Promise.all(deleteVideoPromises);
        })
        // ?? 2. –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        .then(() => commentsRef.once("value"))
        .then(snapshot => {
            const updatePromises = [];

            snapshot.forEach(childSnapshot => {
                const commentData = childSnapshot.val();
                const commentKey = childSnapshot.key;

                // –Ø–∫—â–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–∞–ª–µ–∂–∏—Ç—å –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                if (commentData.email === user.email) {
                    const update = commentsRef.child(commentKey).update({
                        email: "–í–∏–¥–∞–ª–µ–Ω–∏–π –∞–∫–∞—É–Ω—Ç",
                        commentAuthor: "–í–∏–¥–∞–ª–µ–Ω–∏–π –∞–∫–∞—É–Ω—Ç"
                    });
                    updatePromises.push(update);
                }
            });

            return Promise.all(updatePromises);
        })
        // ?? 3. –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        .then(() => usersRef.remove())
        // ?? 4. –í–∏–¥–∞–ª—è—î–º–æ —Å–∞–º –∞–∫–∞—É–Ω—Ç
        .then(() => user.delete())
        // ?? 5. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        .then(() => {
            alert("? –ê–∫–∞—É–Ω—Ç —ñ –≤—Å—ñ –ø–æ–≤‚Äô—è–∑–∞–Ω—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
            location.reload();
        })
        .catch(error => {
            if (error.code === 'auth/requires-recent-login') {
                alert("–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º –∞–∫–∞—É–Ω—Ç—É.");
                firebase.auth().signOut();
            } else {
                console.error("? –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç—É:", error);
                alert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç—É: " + error.message);
            }
        });
}


        
      
    document.getElementById("show-nsfw-videos").addEventListener("change", function() {
if (auth.currentUser) {
        showNSFW = this.checked;  // Update the variable based on the checkbox state
        loadVideos();  // Reload the videos with the updated setting
} else {
alert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤—ñ–¥–µ–æ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ NSFW.");
}
    });

 function loadVideos() {
    const videoGallery = document.getElementById("video-gallery");
    if (!videoGallery) return;
    videoGallery.innerHTML = "";

    const showNSFWGlobal = showNSFW;

    database.ref("videos").once("value").then(snapshot => {
        snapshot.forEach(childSnapshot => {
            const videoData = childSnapshot.val();
            const videoKey = childSnapshot.key;

            if (videoData.nsfw && !showNSFWGlobal) return;
            if (videoData.private && videoData.email !== currentUserEmail) return;
            if (videoData.domainRestrict && (!currentUserEmail || !currentUserEmail.endsWith("@kfccte-nau.ukr.education"))) return;

            const videoElement = document.createElement("video");
            videoElement.src = videoData.url;
            videoElement.classList.add("video-item");

            // –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ
            const commentSection = document.createElement("div");
            commentSection.classList.add("video-comment");
if (videoData.disabledComments == true) {
commentSection.innerHTML = `üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –≤–∏–º–∫–Ω–µ–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –≤—ñ–¥–µ–æ.`;
} else {
            commentSection.innerHTML = `
                <h3 style="color: white; text-align: left;">–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ:</h3>
                <div id="comments-${videoKey}" class="comments">–©–µ –Ω–µ–º–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤...</div>
                <div class="comment-section" id="comment-section-${videoKey}">
                    <button id="random-comments-${videoKey}" onclick="insertRandomComment('${videoKey}')">üîÅ –í—Å—Ç–∞–≤–∏—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç</button>
                    <input type="text" id="comment-input-${videoKey}" class="comment-input" placeholder="–í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä">
                    <button class="comment-button" onclick="uploadComment('${videoKey}', '${videoData.email}')">
                        <i class="material-icons">send</i>
                    </button>
                    <label id="private-checkbox-${videoKey}" style="display: none;">
                        <input type="checkbox" id="private-comment-${videoKey}">
                        –ü—Ä–∏–≤–∞—Ç–Ω–∏–π
                    </label>
                </div>
            `;
}
videoElement.onclick = () => {

                const viewedKey = `viewed_${videoKey}`;
                if (!localStorage.getItem(viewedKey)) {
                    const newViewCount = (videoData.views || 0) + 1;
                    database.ref("videos/" + videoKey).update({ views: newViewCount })
                        .then(() => {
                            localStorage.setItem(viewedKey, true);
                        })
                        .catch(error => console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤:", error));
                }

                const videoParams = new URLSearchParams({
                    key: videoKey,
                    url: videoData.url,
                    title: videoData.title,
                    author: videoData.author,
                    publishDate: videoData.publishDate,
                    description: videoData.description || "–ë–µ–∑ –æ–ø–∏—Å—É",
                    views: videoData.views || 0,
                    avatar: videoData.author ? videoData.author.charAt(0).toUpperCase() : "?"
                });
                window.location.href = `video.html?${videoParams.toString()}`;
            };

            // –ü—Ä–∏–≤–∞—Ç–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
            const privateComment = commentSection.querySelector(`#private-checkbox-${videoKey}`);
            const privateCheckbox = commentSection.querySelector(`#private-comment-${videoKey}`);
            if (privateComment && privateCheckbox) {
                const showPrivate = userAge >= 16;
                privateComment.style.display = showPrivate ? "block" : "none";
                privateCheckbox.disabled = !showPrivate;
            }

            // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–¥–µ–æ
            const infoElement = document.createElement("div");
            infoElement.classList.add("video-info");

            const avatar = document.createElement("div");
            avatar.classList.add("avatar");
            avatar.innerText = videoData.author ? videoData.author.charAt(0).toUpperCase() : "???";
            avatar.onclick = () => {
                const infoParams = new URLSearchParams({
                    avatar: videoData.author ? videoData.author.charAt(0).toUpperCase() : "?",
                    author: videoData.author
                });
                window.location.href = `profile.html?${infoParams.toString()}`;
            };

            const detailsElement = document.createElement("div");
            detailsElement.classList.add("video-details");
            const privateLabel = videoData.private ? " <span style='color: orange;'>üîí –ü—Ä–∏–≤–∞—Ç–Ω–µ</span>" : "";
            const nsfwLabel = videoData.nsfw ? " <span style='color: red;'> NSFW</span>" : "";
            detailsElement.innerText = `
                ${videoData.title}${privateLabel}${nsfwLabel}
                –ê–≤—Ç–æ—Ä: ${videoData.author || "–ê–Ω–æ–Ω—ñ–º"}
                –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: ${videoData.views || 0}
                –î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: ${videoData.publishDate || "–ù–µ –≤–∫–∞–∑–∞–Ω–∞"}
            `;

            const moreBtn = document.createElement("button");
            moreBtn.classList.add("more-btn");
            moreBtn.innerHTML = `<i class="material-icons">more_vert</i>`;

            const actionMenu = document.createElement("div");
            actionMenu.classList.add("action-menu");
            actionMenu.style.display = "none";

            if (currentUserEmail === videoData.email || currentUserEmail === "zhuzhun2008@gmail.com") {
                const deleteButton = document.createElement("button");
                deleteButton.innerHTML = `<a style="padding:3px 8px; display:flex; align-items:center; justify-content:center;"><i class="material-icons">delete</i>–í–∏–¥–∞–ª–∏—Ç–∏</a>`;
                deleteButton.style.backgroundColor = "red";
                deleteButton.style.color = "white";
                deleteButton.style.marginTop = "10px";
                deleteButton.onclick = () => deleteVideo(videoKey, videoData.url);
                deleteButton.addEventListener("click", () => {
                actionMenu.style.display = "none";
            });
                actionMenu.appendChild(deleteButton);
            }

            if (currentUserEmail === videoData.email) {
                const editButton = document.createElement("button");
                editButton.innerHTML = `<a style="padding:3px 8px; display:flex; align-items:center; justify-content:center;"><i class="material-icons">edit</i>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</a>`;
                editButton.style.backgroundColor = "blue";
                editButton.style.color = "white";
                editButton.style.marginTop = "10px";
                editButton.onclick = () => editVideo(videoKey, videoData);
                editButton.addEventListener("click", () => {
                actionMenu.style.display = "none";
            });
                actionMenu.appendChild(editButton);
            }

            moreBtn.addEventListener("click", () => {
                actionMenu.style.display = (actionMenu.style.display === "block") ? "none" : "block";
            });

            infoElement.appendChild(avatar);
            infoElement.appendChild(detailsElement);
            infoElement.appendChild(moreBtn);
            infoElement.appendChild(actionMenu);

            const container = document.createElement("div");
            container.classList.add("video-container");
            container.appendChild(videoElement);
            container.appendChild(commentSection);
            container.appendChild(infoElement);

            videoGallery.appendChild(container);

            loadComments(videoKey, videoData.email);
        });
    });
}
const randomComments = [
  "–ö–ª–∞—Å–Ω–µ –≤—ñ–¥–µ–æ! üé¨üëç",
  "–î—É–∂–µ —Ü—ñ–∫–∞–≤–æ ü§ì‚ú®",
  "–î—è–∫—É—é –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç üôèüíñ",
  "–°—É–ø–µ—Ä –ø–æ—è—Å–Ω–µ–Ω–Ω—è!üëåüìö",
  "–ü—ñ–¥—Ç—Ä–∏–º—É—é üí™üî•",
  "–¢–æ–ø—á–∏–∫!‚≠êüòé"
];
function formatTime(seconds) {
    seconds = Math.floor(seconds); // –æ–∫—Ä—É–≥–ª—é—î–º–æ –¥–æ —Ü—ñ–ª–æ–≥–æ —á–∏—Å–ª–∞
    const h = Math.floor(seconds / 3600); // –≥–æ–¥–∏–Ω–∏
    const m = Math.floor((seconds % 3600) / 60); // —Ö–≤–∏–ª–∏–Ω–∏
    const s = seconds % 60; // —Å–µ–∫—É–Ω–¥–∏

    const mm = m.toString().padStart(2, "0");
    const ss = s.toString().padStart(2, "0");

    if (h > 0) {
        const hh = h.toString().padStart(2, "0");
        return `${hh}:${mm}:${ss}`;
    } else {
        return `${mm}:${ss}`;
    }
}
function insertRandomComment(videoKey) {
  const inputId = `comment-input-${videoKey}`;
  const input = document.getElementById(inputId);

  if (input) {
    const randomIndex = Math.floor(Math.random() * randomComments.length);
    input.value = randomComments[randomIndex];
  }
}
function deleteVideo(videoKey, videoURL) {
    if (!videoURL || !videoKey) return alert("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–µ–æ");

    if (confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ –≤—ñ–¥–µ–æ?")) {
        const storageRef = storage.refFromURL(videoURL);
        storageRef.delete()
        .then(() => {
            return database.ref(`videos/${videoKey}`).remove();
        })
        .then(() => {
            alert("–í—ñ–¥–µ–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
            loadVideos();
        })
        .catch((error) => {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤—ñ–¥–µ–æ:", error);
            alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤—ñ–¥–µ–æ: " + error.message);
        });
    }
}
function editVideo(videoKey, videoData) {
  currentEditKey = videoKey;
  document.getElementById("edit-form").style.display = 'block';

  // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
  document.getElementById("edit-video-title").value = videoData.title || '';
  document.getElementById("edit-video-description").value = videoData.description || '';
document.getElementById("edit-private-checkbox").checked = videoData.private || false;
}

function saveVideoChanges() {
  if (!currentEditKey) return alert("–í—ñ–¥–µ–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ.");

  const newTitle = document.getElementById("edit-video-title").value.trim();
const newPrivate = document.getElementById("edit-private-checkbox").checked;
  const newDescription = document.getElementById("edit-video-description").value.trim();

  if (!newTitle) {
    alert("–ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é!");
    return;
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ –æ–ø–∏—Å
  database.ref("videos/" + currentEditKey).update({
    title: newTitle,
    description: newDescription,
    private: newPrivate
  }).then(() => {
    alert("? –í—ñ–¥–µ–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!");
    document.getElementById("edit-form").style.display = 'none';
    currentEditKey = null;
    loadVideos(); // –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É
  }).catch(error => {
    alert("? –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥–µ–æ: " + error.message);
  });
}
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
function uploadVideo() {
const startTime = Date.now();
    const videoTitle = document.getElementById("video-title").value;
    const videoDescription = document.getElementById("video-description").value;
    const videoFile = document.getElementById("video-file").files[0];
    const isNSFW = document.getElementById("nsfw-checkbox").checked;
    const disabledComments = document.getElementById("disabled-comments-checkbox").checked;
    const privateVideo = document.getElementById("private-checkbox").checked;
     const domainRestrict = document.getElementById("domain-restrict-checkbox")?.checked || false;

    if (!videoTitle || !videoFile) {
        alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!");
        return;
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ UID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const uid = firebase.auth().currentUser.uid;

    // –ë–µ—Ä–µ–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Firebase
    database.ref("users/" + uid).once("value").then(snapshot => {
        const userData = snapshot.val();
        const videoAuthor = `${userData.name} ${userData.supername}`; // –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ —É Firebase Storage
        const storageRef = storage.ref(`videos/${videoFile.name}`);
        const uploadTask = storageRef.put(videoFile);

        uploadTask.on('state_changed',
            (snapshot) => {
                // –ü—Ä–æ–≥—Ä–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
          const timeElapsed = (Date.now() - startTime) / 1000;
            const speed = snapshot.bytesTransferred / timeElapsed;
            const remainingBytes = snapshot.totalBytes - snapshot.bytesTransferred;
            const timeLeft = remainingBytes / speed;
      document.getElementById("time-left").innerText =`${(timeLeft)}s`;
      document.getElementById("upload-progress").value = progress;
                document.getElementById("progress-text").innerText = `${Math.round(progress)}%`;
                document.getElementById("progress-container").style.display = "block";
            },
            (error) => {
                alert("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ.");
            },
            () => {
                uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {
                    const currentDate = new Date().toLocaleDateString();

                    // –ó–∞–ø–∏—Å —É –±–∞–∑—É
                    database.ref("videos").push({
                        title: videoTitle,
                        author: videoAuthor,       // –Ü–º'—è —ñ –ø—Ä—ñ–∑–≤–∏—â–µ –∑ –ø—Ä–æ—Ñ—ñ–ª—é
                        email: currentUserEmail,
                        disabledComments: disabledComments,
                        url: downloadURL,
                        description: videoDescription,
                        views: 0,
                        private: privateVideo,
                        domainRestrict: domainRestrict,
                        nsfw: isNSFW,
                        publishDate: currentDate
                    }).then(() => {
                        alert("–í—ñ–¥–µ–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!");
                        loadVideos(); 
                        document.getElementById("upload-form").reset();
                        document.getElementById("progress-container").style.display = "none";
                    });
                });
            }
        );
    }).catch(err => {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", err);
        alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.");
    });
}


// –ì–µ–Ω–µ—Ä—É—î–º–æ –∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ –∫–ª—é—á –¥–ª—è –≤—ñ–¥–µ–æ
function getVideoKey(videoKey) {
    let key = localStorage.getItem(`videoKey-${videoKey}`);
    if (!key) {
        key = crypto.randomUUID(); // –ø—Ä–æ—Å—Ç–∏–π –∫–ª—é—á, –º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Å–∏–ª—å–Ω—ñ—à–µ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
        localStorage.setItem(`videoKey-${videoKey}`, key);
    }
    return key;
}

// –ü—Ä–æ—Å—Ç–µ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è/–¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ AES)
async function encryptText(text, key) {
    const enc = new TextEncoder();
    const encoded = enc.encode(text + key); // –¥—É–∂–µ –±–∞–∑–æ–≤–æ
    return btoa(String.fromCharCode(...encoded));
}

async function decryptText(cipher, key) {
    const decoded = atob(cipher);
    const arr = Uint8Array.from(decoded, c => c.charCodeAt(0));
    const dec = new TextDecoder();
    const text = dec.decode(arr);
    return text.replace(key, ''); // –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ –∫–ª—é—á
}
async function loadComments(videoKey, videoOwnerEmail) { 
    const commentsContainer = document.getElementById(`comments-${videoKey}`);
    commentsContainer.innerHTML = "";

    const snapshot = await database.ref("comments")
        .orderByChild("videoKey")
        .equalTo(videoKey)
        .once("value");

    if (!snapshot.exists()) {
        commentsContainer.textContent = "–©–µ –Ω–µ–º–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤...";
        return;
    }

    const videoKeyLocal = getVideoKey(videoKey);
    const commentsArray = [];

    snapshot.forEach(childSnapshot => {
        commentsArray.push(childSnapshot.val());
    });

    for (const data of commentsArray) {
        if (data.isPrivate && !(data.email === currentUserEmail || videoOwnerEmail === currentUserEmail)) {
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫ –≤—ñ–¥–µ–æ
        }

        const commentDiv = document.createElement("div");
        commentDiv.className = "comments";

        const userEl = document.createElement("strong");
        userEl.textContent = data.commentAuthor || "–í–∏–¥–∞–ª–µ–Ω–∏–π –∞–∫–∞—É–Ω—Ç";

        const textEl = document.createElement("span");
        if (data.isPrivate) {
            textEl.textContent = ": " + await decryptText(data.comment, videoKeyLocal);
        } else {
            textEl.textContent = ": " + data.comment;
        }

        const br = document.createElement("br");
        const dateEl = document.createElement("small");
        dateEl.textContent = data.publishDate;

        commentDiv.appendChild(userEl);
        commentDiv.appendChild(textEl);
        commentDiv.appendChild(br);
        commentDiv.appendChild(dateEl);
        commentsContainer.appendChild(commentDiv);
    }
}
// –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
function editName() {
  document.getElementById("form-edit-name").style.display = "block";
  document.getElementById("name").style.display = "none";
  document.getElementById("button-name").style.display = "none";

  const currentName = document.getElementById("name").textContent.replace("–Ü–º'—è: ", "");
  document.getElementById("edit-name").value = currentName;
}

// –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä—ñ–∑–≤–∏—â–∞
function editSuperName() {
  document.getElementById("form-edit-supername").style.display = "block";
  document.getElementById("supername").style.display = "none";
  document.getElementById("button-supername").style.display = "none";

  const currentSuperName = document.getElementById("supername").textContent.replace("–ü—Ä—ñ–∑–≤–∏—â–µ: ", "");
  document.getElementById("edit-supername").value = currentSuperName;
}

// –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω—É —ñ–º–µ–Ω—ñ
function saveEditName() {
  const newName = document.getElementById("edit-name").value.trim();
  const user = firebase.auth().currentUser;
  if (!user) return alert("–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å.");

  const uid = user.uid;
  database.ref("users/" + uid).update({ name: newName }).then(() => {
    alert("? –Ü–º‚Äô—è –∑–º—ñ–Ω–µ–Ω–æ!");
    document.getElementById("form-edit-name").style.display = "none";
    document.getElementById("name").style.display = "block";
    document.getElementById("button-name").style.display = "block";
    document.getElementById("name").textContent = "–Ü–º'—è: " + newName;
    updateVideosAuthor();
  }).catch(err => alert("? –ü–æ–º–∏–ª–∫–∞: " + err.message));
}

// –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω—É –ø—Ä—ñ–∑–≤–∏—â–∞
function saveEditSuperName() {
  const newSuperName = document.getElementById("edit-supername").value.trim();
  const user = firebase.auth().currentUser;
  if (!user) return alert("–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å.");

  const uid = user.uid;
  database.ref("users/" + uid).update({ supername: newSuperName }).then(() => {
    alert("? –ü—Ä—ñ–∑–≤–∏—â–µ –∑–º—ñ–Ω–µ–Ω–æ!");
    document.getElementById("form-edit-supername").style.display = "none";
    document.getElementById("supername").style.display = "block";
    document.getElementById("button-supername").style.display = "block";
    document.getElementById("supername").textContent = "–ü—Ä—ñ–∑–≤–∏—â–µ: " + newSuperName;
    updateVideosAuthor();
  }).catch(err => alert("? –ü–æ–º–∏–ª–∫–∞: " + err.message));
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—ñ–≤ —É –≤—ñ–¥–µ–æ —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
async function uploadComment(videoKey, videoOwnerEmail) {
    const commentInput = document.getElementById(`comment-input-${videoKey}`);
    const commentText = commentInput.value.trim();
    const isPrivate = document.getElementById(`private-comment-${videoKey}`).checked;

    if (!commentText) return alert("–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.");

    let commentData = commentText;
    if (isPrivate) {
        const videoKeyLocal = getVideoKey(videoKey);
        commentData = await encryptText(commentText, videoKeyLocal);
    }

    const uid = firebase.auth().currentUser.uid;

    // –ë–µ—Ä–µ–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Firebase
    const snapshot = await database.ref("users/" + uid).once("value");
    const userData = snapshot.val();
    const commentAuthor = `${userData.name} ${userData.supername}`;

    // –î–æ–¥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä —É –±–∞–∑—É
    await database.ref("comments").push({
        comment: commentData,
        email: currentUserEmail,
        commentAuthor: commentAuthor,
        videoOwner: videoOwnerEmail,
        isPrivate: isPrivate,
        publishDate: new Date().toLocaleDateString(),
        videoKey: videoKey
    });

    // –û—á–∏—â—É—î–º–æ –ø–æ–ª–µ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
    commentInput.value = "";
    await loadComments(videoKey, videoOwnerEmail);
}


function toggleUploadVisibility() {
    const isMobile = window.innerWidth <= 768;
    const upload = document.getElementById("upload-link");
    const photoUpload = document.getElementById("upload-link-photo");
    const smartPhotoUpload = document.getElementById("smart-upload-link-photo");
    const smartUpload = document.getElementById("smart-upload-link");
    const openMenu = document.getElementById("open-menu");

    if (isMobile) {
        openMenu.style.display = "none";
        smartUpload.style.display = "grid";
        smartPhotoUpload.style.display = "grid";
        if (auth.currentUser) {
            upload.style.display = "none";
            photoUpload.style.display = "none";
        }
    } else {
        openMenu.style.display = "flex";
        smartUpload.style.display = "none";
        smartPhotoUpload.style.display = "none";
        if (auth.currentUser) {
            upload.style.display = "flex";
            photoUpload.style.display = "flex";
        }
    }
}

window.addEventListener('load', toggleUploadVisibility);
window.addEventListener('resize', toggleUploadVisibility);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
function updateUI(user) {
  if (user) {
    currentUserEmail = user.email;

    // –Ü–Ω—Ñ–æ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userInfoEl = document.getElementById("user-info");
    if (userInfoEl) userInfoEl.textContent = `–í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫: ${user.email}`;

    // –ö–Ω–æ–ø–∫–∏/–ø–æ—Å–∏–ª–∞–Ω–Ω—è
    document.getElementById("signup")?.style?.setProperty("display", "none");
    document.getElementById("auth-link")?.style?.setProperty("display", "none");
    document.getElementById("register-link")?.style?.setProperty("display", "none");
    document.getElementById("logout-link")?.style?.setProperty("display", "flex");
    document.getElementById("account-link")?.style?.setProperty("display", "flex");
    document.getElementById("upload-link")?.style?.setProperty("display", "flex");
    document.getElementById("upload-link-photo")?.style?.setProperty("display", "flex");
    document.getElementById("smart-upload-link")?.style?.setProperty("display", "grid");
    document.getElementById("smart-upload-link-photo")?.style?.setProperty("display", "grid");

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ
    document.querySelectorAll('[id^="comment-input-"]').forEach(el => {
      el.style.display = "flex";
    });

    // –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω—É
    const domainRestrictContainer = document.getElementById("domain-restrict-container");
    if (domainRestrictContainer) {
      if (currentUserEmail.endsWith("@kfccte-nau.ukr.education")) {
        domainRestrictContainer.style.display = "block";
      } else {
        domainRestrictContainer.style.display = "none";
      }
    }

  } else {
    currentUserEmail = null;

    // –Ü–Ω—Ñ–æ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userInfoEl = document.getElementById("user-info");
    if (userInfoEl) userInfoEl.textContent = "";

    // –ö–Ω–æ–ø–∫–∏/–ø–æ—Å–∏–ª–∞–Ω–Ω—è
    document.getElementById("signup")?.style?.setProperty("display", "flex");
    document.getElementById("auth-link")?.style?.setProperty("display", "flex");
    document.getElementById("register-link")?.style?.setProperty("display", "flex");
    document.getElementById("logout-link")?.style?.setProperty("display", "none");
    document.getElementById("account-link")?.style?.setProperty("display", "none");
    document.getElementById("upload-link")?.style?.setProperty("display", "none");
    document.getElementById("upload-link-photo")?.style?.setProperty("display", "none");
    document.getElementById("smart-upload-link")?.style?.setProperty("display", "none");
    document.getElementById("smart-upload-link-photo")?.style?.setProperty("display", "none");

    // –°—Ö–æ–≤–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
    document.querySelectorAll('[id^="comment-input-"]').forEach(el => {
      el.style.display = "none";
    });
  }
}

// –°–ª—É—Ö–∞—á —Å—Ç–∞–Ω—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó

auth.onAuthStateChanged((user) => {
    if (!user) return;

    currentUserEmail = user.email;

    enablePushNotifications(user.uid);
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ email
    if (!user.emailVerified) {
        blockScreenForVerification();
        const verificationInterval = setInterval(() => {
            user.reload().then(() => {
                if (user.emailVerified) {
                    clearInterval(verificationInterval);
                    updateUI(user);
                }
            }).catch(err => console.error("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ email:", err));
        }, 10000);
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const uid = user.uid;
    database.ref("users/" + uid).once("value").then(snapshot => {
        const userData = snapshot.val();
        const birthStr = userData?.birthdate;

        if (!userData?.email || !birthStr) {
            const modal = document.getElementById("birthdate-modal");
            if (modal) modal.style.display = "flex";
        }

        // –û–±—á–∏—Å–ª—é—î–º–æ –≤—ñ–∫
        if (birthStr) {
            let birthDate;
            const match = birthStr.match(/^(\d{2})\.(\d{2})\.(\d{4})$/);
            if (match) {
                const [, d, m, y] = match;
                birthDate = new Date(`${y}-${m}-${d}`);
            } else {
                birthDate = new Date(birthStr);
            }

            if (!isNaN(birthDate)) {
                const today = new Date();
                let age = today.getFullYear() - birthDate.getFullYear();
                const mm = today.getMonth() - birthDate.getMonth();
                if (mm < 0 || (mm === 0 && today.getDate() < birthDate.getDate())) age--;
                userAge = age;
            }
        }

        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const viewBirthdate = document.getElementById("view");
        if (viewBirthdate) viewBirthdate.innerHTML = `–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${birthStr || "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"}`;
        const emailEl = document.getElementById("email");
const avatarProfile = document.querySelector(".avatar");
       avatarProfile.innerText = userData.name ? userData.name.charAt(0).toUpperCase() : "?";
        if (emailEl) emailEl.innerHTML = `${userData?.name || ""} ${userData?.supername || ""}`;
document.getElementById("name").innerHTML = `–Ü–º'—è: ${userData?.name}`;
document.getElementById("supername").innerHTML = `–ü—Ä—ñ–∑–≤–∏—â–µ: ${userData?.supername || ""}`;
        // NSFW –≥–ª–æ–±–∞–ª—å–Ω–∏–π —á–µ–∫–±–æ–∫—Å
        const nsfwCheckbox = document.getElementById('show-nsfw-videos');
        const nsfwSlider = document.getElementById("slidernsfw");
        const nsfwInfo = document.getElementById("information-nsfw");
        const NSFW = document.getElementById("nsfw");

        if (nsfwCheckbox) {
            if (userAge < 18) {
                if (nsfwSlider) nsfwSlider.style.backgroundColor = "gray";
                nsfwCheckbox.checked = false;
                nsfwCheckbox.disabled = true;
                if (NSFW) NSFW.style.display = "none";
                if (nsfwInfo) nsfwInfo.style.display = "block";
            } else {
                nsfwCheckbox.disabled = false;
                if (NSFW) NSFW.style.display = "block";
                if (nsfwInfo) nsfwInfo.style.display = "none";

                if (!nsfwCheckbox.dataset.listenerAdded) {
                    nsfwCheckbox.addEventListener("change", function () {
                        showNSFW = this.checked;
        loadVideos();
                    });
                    nsfwCheckbox.dataset.listenerAdded = "true";
                }
            }
        }

        // –ü—ñ—Å–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–µ–æ
        loadVideos();

    }).catch(err => console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", err));

    updateUI(user);
    toggleUploadVisibility();
});
function submitBirthdate() {
  const user = firebase.auth().currentUser;
  const input = document.getElementById("birthdate-input").value;
  const nameInput = document.getElementById("name-input").value;
  const supernameInput = document.getElementById("supername-input").value;


  if (!input || !nameInput || !supernameInput) {
    alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.");
    return;
  }

  const [year, month, day] = input.split("-");
  const formattedDate = `${day}.${month}.${year}`;

  firebase.database().ref("users/" + user.uid).update({
    birthdate: formattedDate,
    email: user.email,
    name: nameInput,
    supername: supernameInput
  }).then(() => {
    alert("–î–∞—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞.");
   updateVideosAuthor();
  });
}
function updateVideosAuthor() {
  const user = firebase.auth().currentUser;
  if (!user) return;
  const uid = user.uid;

  database.ref("users/" + uid).once("value").then(snapshot => {
    const userData = snapshot.val() || {};
    const namePart = userData.name ? userData.name : "";
    const supernamePart = userData.supername ? userData.supername : "";
    const fullName = namePart + " " + supernamePart;

    // ?? –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
    const videoUpdates = [];
    database.ref("videos").once("value").then(videoSnap => {
      videoSnap.forEach(child => {
        const video = child.val();
        if (video.email === user.email) {
          videoUpdates.push(database.ref("videos/" + child.key).update({ author: fullName }));
        }
      });
      return Promise.all(videoUpdates);
    }).then(() => {
      // ?? –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
      const commentUpdates = [];
      return database.ref("comments").once("value").then(commentSnap => {
        commentSnap.forEach(child => {
          const comment = child.val();
          if (comment.email === user.email) {
            commentUpdates.push(database.ref("comments/" + child.key).update({ commentAuthor: fullName }));
          }
        });
        return Promise.all(commentUpdates);
      });
    }).then(() => {
      location.reload(); // ?? –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    }).catch(err => {
      console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:", err);
    });
  });
}
document.getElementById("logout-link").onclick = function() {
            auth.signOut().then(() => {
                alert("–í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–∫–∞—É–Ω—Ç—É.");
                location.reload();
            });
        };
function loadPhotos() {
    const photoGallery = document.getElementById("photo-gallery");
    photoGallery.innerHTML = "";

    database.ref("photos").once("value").then((snapshot) => {
        snapshot.forEach((childSnapshot) => {
            const photoData = childSnapshot.val();
            const photoKey = childSnapshot.key;

            const photoElement = document.createElement("img");
            photoElement.src = photoData.url;
            photoElement.alt = photoData.title || "–§–æ—Ç–æ";
            photoElement.classList.add("photo-item");

            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
            photoElement.addEventListener("play", () => {
                const newViewCount = (photoData.views || 0) + 1;
                database.ref("photos/" + photoKey).update({ views: newViewCount })
                .catch(error => console.error("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤:", error));
            });

            const infophotoElement = document.createElement("div");
            infophotoElement.classList.add("photo-info");

            // –ê–≤–∞—Ç–∞—Ä
            const avatar = document.createElement("div");
            avatar.classList.add("avatar");
            avatar.innerText = photoData.author ? photoData.author.charAt(0).toUpperCase() : "???";
            
            const detailsphotoElement = document.createElement("div");
            detailsphotoElement.classList.add("photo-details");
            detailsphotoElement.innerHTML = `<strong>${photoData.title || "–ê–Ω–æ–Ω—ñ–º–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"}</strong><br>–ê–≤—Ç–æ—Ä: ${photoData.author}<br>–î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: ${photoData.publishDate || "–ù–µ –≤–∫–∞–∑–∞–Ω–∞"}<br>–û–ø–∏—Å:${photoData.description || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}`;

             if (currentUserEmail === photoData.email || currentUserEmail === "zhuzhun2008@gmail.com") {
                const deletePhotoButton = document.createElement("button");
                deletePhotoButton.innerText = "–í–∏–¥–∞–ª–∏—Ç–∏";
                deletePhotoButton.style.backgroundColor = "red";
                deletePhotoButton.style.color = "white";
                deletePhotoButton.style.marginTop = "10px";
                deletePhotoButton.onclick = () => deletePhoto(photoKey, photoData.url);
                infophotoElement.appendChild(deletePhotoButton);
        }
            infophotoElement.appendChild(avatar);
            infophotoElement.appendChild(detailsphotoElement);

            const Photocontainer = document.createElement("div");
            Photocontainer.classList.add("photo-container");
            Photocontainer.appendChild(photoElement);
            Photocontainer.appendChild(infophotoElement);
            
            photoGallery.appendChild(Photocontainer);
        });
    });
        }

function deletePhoto(photoKey, photoURL) {
    if (confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ —Ñ–æ—Ç–æ?")) {
        // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑—ñ —Å—Ö–æ–≤–∏—â–∞
        const storageRef = storage.refFromURL(photoURL);
        storageRef.delete().then(() => {
            // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            database.ref(`photos/${photoKey}`).remove().then(() => {
                alert("–§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
                loadPhotos(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ
            }).catch((error) => {
                alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: " + error.message);
            });
        }).catch((error) => {
            alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ –∑—ñ —Å—Ö–æ–≤–∏—â–∞: " + error.message);
        });
    }
}

    // Example of how video data might be stored with an 'nsfw' attribute
function uploadPhoto() {
    const photoDescription = document.getElementById("photo-description").value;
    const photoTitle = document.getElementById("photo-title").value;
    const photoFile = document.getElementById("photo-file").files[0];
    const uploadProgress = document.getElementById("upload-progress");
    const progressText = document.getElementById("progress-text");
    const progressContainer = document.getElementById("progress-photo-container");

    if (!photoTitle || !photoFile) {
        alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!");
        return;
    }

    if (photoFile) {
        const storageRef = storage.ref(`photos/${photoFile.name}`);
        const uploadTask = storageRef.put(photoFile);

    uploadTask.on('state_changed', 
            (snapshot) => {
                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                uploadProgress.value = progress;
                progressText.innerText = `${Math.round(progress)}%`;
                progressContainer.style.display = "block";
            }, 
            (error) => {
                alert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ." + error);
            }, 
            () => {
                uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {
                    // Get current date
                    const currentDate = new Date().toLocaleDateString();

                    // Save video info to database
                    database.ref("photos").push({
                        title: photoTitle,
                        author: photoAuthor,
                        email: currentUserEmail,
                        url: downloadURL,
                        description: photoDescription,
                        publishDate: currentDate // Save the publish date
                    }).then(() => {
                        alert("–§–æ—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!");
                        loadPhotos(); // Reload videos
                        document.getElementById("upload-photo-form").reset();
                        progressContainer.style.display = "none"; // Hide progress
                    });
                });
            }
        );
    } else {
        alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.");
    }
}
// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
function loadSettings() {
    const savedMaxTime = localStorage.getItem('maxTimeInMinutes');
    maxTimeInMinutes = savedMaxTime ? parseInt(savedMaxTime) : null;
    const maxInput = document.getElementById('maxTimeInput');
    if (maxInput) maxInput.value = maxTimeInMinutes ?? '';

    const savedSleepStart = localStorage.getItem('sleepStart');
    sleepStart = savedSleepStart !== '' ? savedSleepStart : null;
    const sleepStartInput = document.getElementById('sleepStart');
    if (sleepStartInput) sleepStartInput.value = sleepStart ?? '';

    const savedSleepEnd = localStorage.getItem('sleepEnd');
    sleepEnd = savedSleepEnd !== '' ? savedSleepEnd : null;
    const sleepEndInput = document.getElementById('sleepEnd');
    if (sleepEndInput) sleepEndInput.value = sleepEnd ?? '';

    const savedDate = localStorage.getItem('lastUsedDate');
    const currentDate = new Date().toDateString();

    if (savedDate !== currentDate) {
        localStorage.setItem('lastUsedDate', currentDate);
        timeLeftInSeconds = maxTimeInMinutes ? maxTimeInMinutes * 60 : null;
    } else {
        timeLeftInSeconds = parseInt(localStorage.getItem('timeLeft')) || (maxTimeInMinutes ? maxTimeInMinutes * 60 : null);
    }
}


// // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –¥–ª—è input type="time"
function formatTime(hour) {
    return hour !== null ? (hour < 10 ? '0' + hour + ':00' : hour + ':00') : '';
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
function saveSettings() {
    const maxTime = parseInt(document.getElementById('maxTimeInput').value);
    const sleepStartTime = document.getElementById('sleepStart').value;
    const sleepEndTime = document.getElementById('sleepEnd').value;

    maxTimeInMinutes = isNaN(maxTime) ? null : maxTime;
    sleepStart = sleepStartTime ? parseInt(sleepStartTime.split(':')[0]) : null;
    sleepEnd = sleepEndTime ? parseInt(sleepEndTime.split(':')[0]) : null;

    localStorage.setItem('maxTimeInMinutes', maxTimeInMinutes ?? '');
    localStorage.setItem('sleepStart', sleepStart ?? '');
    localStorage.setItem('sleepEnd', sleepEnd ?? '');

    if (timeLeftInSeconds === null) {
        timeLeftInSeconds = maxTimeInMinutes ? maxTimeInMinutes * 60 : null;
        if (timeLeftInSeconds !== null) {
            localStorage.setItem('timeLeft', timeLeftInSeconds);
        }
    }
}

// // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É —Å–Ω—É
function isSleepTime() {
    if (!sleepStart || !sleepEnd) return false;

    const [startH, startM] = sleepStart.split(':').map(Number);
    const [endH, endM] = sleepEnd.split(':').map(Number);

    if (isNaN(startH) || isNaN(endH)) return false;

    const current = new Date();
    const nowMinutes = current.getHours() * 60 + current.getMinutes();
    const startMinutes = startH * 60 + startM;
    const endMinutes = endH * 60 + endM;

    return startMinutes < endMinutes
        ? nowMinutes >= startMinutes && nowMinutes < endMinutes
        : nowMinutes >= startMinutes || nowMinutes < endMinutes;
}



// // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ —Ç–∞ —Ñ–æ–Ω—É
function updateTimer() {
    if (isSleepTime()) {
        document.body.style.background = "background: radial-gradient(circle at left top, rgb(15, 23, 42), rgb(10, 14, 26))";
        document.body.innerHTML = `<h1 style="color: white; text-align: center;">–ß–∞—Å —Å–ø–∞—Ç–∏. –°–∞–π—Ç —Ä–æ–∑–±–ª–æ–∫—É—î—Ç—å—Å—è –æ ${sleepEnd}:00</h1>`;
        return;
    } else {
        document.body.style.background = "background: radial-gradient(circle at left top, rgb(15, 23, 42), rgb(10, 14, 26))";
    }

    if (timeLeftInSeconds !== null && timeLeftInSeconds > 0) {
        const minutes = Math.floor(timeLeftInSeconds / 60);
        const seconds = timeLeftInSeconds % 60;
        document.getElementById('timer').textContent = `–ó–∞–ª–∏—à–∏–ª–æ—Å—å —á–∞—Å—É: ${minutes} —Ö–≤ ${seconds} —Å–µ–∫`;
        timeLeftInSeconds--;
        localStorage.setItem('timeLeft', timeLeftInSeconds);
    } else if (timeLeftInSeconds !== null) {
        document.body.style.background = "mediumseagreen";
        document.body.innerHTML = `<h1 style="color: white; text-align: center;">–ß–∞—Å –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–π—Ç–∏ —ñ–∑ —Å–∞–π—Ç—É —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ –µ–∫—Ä–∞–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç.</h1>`;
        return;
    }

    // –°–∫–∏–¥–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –ø—ñ—Å–ª—è 00:00
    const currentDate = new Date().toDateString();
    if (localStorage.getItem('lastUsedDate') !== currentDate) {
        localStorage.setItem('lastUsedDate', currentDate);
        timeLeftInSeconds = maxTimeInMinutes ? maxTimeInMinutes * 60 : null;
        localStorage.setItem('timeLeft', timeLeftInSeconds);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
setInterval(updateTimer, 1000);




        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        
window.onload = function() {
	loadSettings();
        loadVideos();
        loadPhotos();
        const commentsContainer = document.getElementById('comments');
  if (commentsContainer) {
    loadComments();
  }
    };
